// automatically generated by Xtext
grammar ac.soton.xtext.context.dsl.ContextDsl with org.eclipse.xtext.common.Terminals

import "http://emf.eventb.org/models/core/context/2014" 
import "http://emf.eventb.org/models/core/2014" as core
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://emf.eventb.org/models/core/machine/2014" as machine

Context returns Context:
	{Context}
	(localGenerated?='localGenerated')?
	'Context'
	name=EString
	'{'
		('internalId' internalId=EString)?
		('comment' comment=EString)?
		('extends' '(' extends+=[Context|EString] ( "," extends+=[Context|EString])* ')' )?
		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
		('sets' '{' sets+=CarrierSet ( "," sets+=CarrierSet)* '}' )?
		('constants' '{' constants+=Constant ( "," constants+=Constant)* '}' )?
		('axioms' '{' axioms+=Axiom ( "," axioms+=Axiom)* '}' )?
	'}';


AbstractExtension returns core::AbstractExtension:
	Extension;


Annotation returns core::Annotation:
	{core::Annotation}
	'Annotation'
	'{'
		('source' source=EString)?
		('references' '(' references+=[ecore::EObject|EString] ( "," references+=[ecore::EObject|EString])* ')' )?
		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
		('details' '{' details+=StringToStringMapEntry ( "," details+=StringToStringMapEntry)* '}' )?
		('contents' '{' contents+=EObject ( "," contents+=EObject)* '}' )?
	'}';

StringToAttributeMapEntry returns core::StringToAttributeMapEntry:
	'StringToAttributeMapEntry'
	'{'
		'key' key=EString
		('value' value=Attribute)?
	'}';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

EString returns ecore::EString:
	STRING | ID;

CarrierSet returns CarrierSet:
	{CarrierSet}
	(localGenerated?='localGenerated')?
	'CarrierSet'
	name=EString
	'{'
		('internalId' internalId=EString)?
		('comment' comment=EString)?
		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
	'}';

Constant returns Constant:
	{Constant}
	(localGenerated?='localGenerated')?
	'Constant'
	name=EString
	'{'
		('internalId' internalId=EString)?
		('comment' comment=EString)?
		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
	'}';

Axiom returns Axiom:
	(localGenerated?='localGenerated')?
	theorem?='theorem'
	'Axiom'
	name=EString
	'{'
		('internalId' internalId=EString)?
		('comment' comment=EString)?
		'predicate' predicate=EString
		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
	'}';

StringToStringMapEntry returns core::StringToStringMapEntry:
	{core::StringToStringMapEntry}
	'StringToStringMapEntry'
	'{'
		('key' key=EString)?
		('value' value=EString)?
	'}';

EObject returns ecore::EObject:
	{ecore::EObject}
	'EObject'
	;

Extension returns core::Extension:
	(localGenerated?='localGenerated')?
	'Extension'
	'{'
		('internalId' internalId=EString)?
		'extensionId' extensionId=EString
		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
	'}';

Attribute returns core::Attribute:
	'Attribute'
	'{'
		'type' type=AttributeType
		'value' value=EJavaObject
		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
	'}';

enum AttributeType returns core::AttributeType:
				Boolean = 'Boolean' | Handle = 'Handle' | Integer = 'Integer' | Long = 'Long' | String = 'String';

EJavaObject returns ecore::EJavaObject:
	'EJavaObject' /* TODO: implement this rule and an appropriate IValueConverter */;
