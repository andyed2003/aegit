// automatically generated by Xtext
grammar ac.soton.xtext.machine.dsl.MachineDsl with org.eclipse.xtext.common.Terminals

import "http://emf.eventb.org/models/core/context/2014" as context
import "http://emf.eventb.org/models/core/2014" as core
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://emf.eventb.org/models/core/machine/2014" 

Machine returns Machine:
	{Machine}
	(localGenerated?='localGenerated')?
	'Machine'
	name=EString
	
		('internalId' internalId=EString)?
		('Comment' comment=EString)?
		('Refines' '(' refines+=[Machine|EString] ( "," refines+=[Machine|EString])* ')' )?
		('Sees' '(' sees+=[context::Context|EString] ( "," sees+=[context::Context|EString])* ')' )?
		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
		('Variables'  variables+=Variable ( "," variables+=Variable)*  )?
		('Invariants' invariants+=Invariant ( "&" invariants+=Invariant)*  )?
		('Variant' variant=Variant)?
		('Events' events+=Event ( events+=Event)* )?
	;


AbstractExtension returns core::AbstractExtension:
	Extension;



Annotation returns core::Annotation:
	{core::Annotation}
	'Annotation'
	'{'
		('source' source=EString)?
		('references' '(' references+=[ecore::EObject|EString] ( "," references+=[ecore::EObject|EString])* ')' )?
		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
		('details' '{' details+=StringToStringMapEntry ( "," details+=StringToStringMapEntry)* '}' )?
		('contents' '{' contents+=EObject ( "," contents+=EObject)* '}' )?
	'}';

StringToAttributeMapEntry returns core::StringToAttributeMapEntry:
	'StringToAttributeMapEntry'
	'{'
		'key' key=EString
		('value' value=Attribute)?
	'}';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

EString returns ecore::EString:
	STRING | ID;

Context returns context::Context:
	{context::Context}
	(localGenerated?='localGenerated')?
	'Context'
	name=EString
	'{'
		('internalId' internalId=EString)?
		('comment' comment=EString)?
		('extends' '(' extends+=[context::Context|EString] ( "," extends+=[context::Context|EString])* ')' )?
		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
		('sets' '{' sets+=CarrierSet ( "," sets+=CarrierSet)* '}' )?
		('constants' '{' constants+=Constant ( "," constants+=Constant)* '}' )?
		('axioms' '{' axioms+=Axiom ( "," axioms+=Axiom)* '}' )?
	'}';

Variable returns Variable:
	{Variable}
	(localGenerated?='localGenerated')?
	'Variable'
	name=EString
	
		('internalId' internalId=EString)?
		('comment' comment=EString)?
		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
	;

Invariant returns Invariant:
	'Invariant'
	name=EString

	(localGenerated?='localGenerated')?
	theorem?='theorem'?'notTheorem'
	
		('internalId' internalId=EString)?
		('comment' comment=EString)?
		'is' predicate=EString
		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
	;

Variant returns Variant:
	(localGenerated?='localGenerated')?
	'Variant'
	
		('internalId' internalId=EString)?
		('comment' comment=EString)?
		'Expression' expression=EString
		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
	;

Event returns Event:
	{Event}
	'Event'
	name=EString
	(localGenerated?='localGenerated')?
	(extended?='extended')?
	
		('internalId' internalId=EString)?
		('Comment' comment=EString)?
		('Convergence' convergence=Convergence)?
		('Refines' '(' refines+=[Event|EString] ( "," refines+=[Event|EString])* ')' )?
		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
		('Parameters'  parameters+=Parameter ( "," parameters+=Parameter)*  )?
		('Guards'  guards+=Guard ( "&" guards+=Guard)*  )?
		('Witnesses'  witnesses+=Witness ( "," witnesses+=Witness)*  )?
		('Actions'  actions+=Action ( " || " actions+=Action)*  )?
	;

StringToStringMapEntry returns core::StringToStringMapEntry:
	{core::StringToStringMapEntry}
	'StringToStringMapEntry'
	'{'
		('key' key=EString)?
		('value' value=EString)?
	'}';

EObject returns ecore::EObject:
	{ecore::EObject}
	'EObject'
	;

Extension returns core::Extension:
	(localGenerated?='localGenerated')?
	'Extension'
	'{'
		('internalId' internalId=EString)?
		'extensionId' extensionId=EString
		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
	'}';

Attribute returns core::Attribute:
	'Attribute'
	'{'
		'type' type=AttributeType
		'value' value=EJavaObject
		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
	'}';

enum AttributeType returns core::AttributeType:
				Boolean = 'Boolean' | Handle = 'Handle' | Integer = 'Integer' | Long = 'Long' | String = 'String';

EJavaObject returns ecore::EJavaObject:
	'EJavaObject' /* TODO: implement this rule and an appropriate IValueConverter */;

CarrierSet returns context::CarrierSet:
	{context::CarrierSet}
	(localGenerated?='localGenerated')?
	'CarrierSet'
	name=EString
	
		('internalId' internalId=EString)?
		('comment' comment=EString)?
		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
	;

Constant returns context::Constant:
	{context::Constant}
	(localGenerated?='localGenerated')?
	'Constant'
	name=EString
	
		('internalId' internalId=EString)?
		('comment' comment=EString)?
		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
	;

Axiom returns context::Axiom:
	'Axiom'
	name=EString
	(localGenerated?='localGenerated')?
	theorem?='theorem'?'notTheorem'
	
		('internalId' internalId=EString)?
		('comment' comment=EString)?
		'Predicate' predicate=EString
		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
	;

enum Convergence returns Convergence:
				ordinary = 'ordinary' | convergent = 'convergent' | anticipated = 'anticipated';

Parameter returns Parameter:
	{Parameter}
	(localGenerated?='localGenerated')?
	'Parameter'
	name=EString
	
		('internalId' internalId=EString)?
		('comment' comment=EString)?
		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
	;

Guard returns Guard:
	'Guard'
	name=EString

	(localGenerated?='localGenerated')?
	theorem?='theorem'?'notTheorem'
	
		('internalId' internalId=EString)?
		('comment' comment=EString)?
		'when' predicate=EString
		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
	;

Witness returns Witness:
	(localGenerated?='localGenerated')?
	'Witness'
	name=EString
	
		('internalId' internalId=EString)?
		('comment' comment=EString)?
		'predicate' predicate=EString
		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
	;

Action returns Action:
	(localGenerated?='localGenerated')?
	'Action'
	name=EString
	
		('internalId' internalId=EString)?
		('comment' comment=EString)?
		'then' action=EString
		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
	;
